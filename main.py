"""Telegram bot 'Balabobny pomogator' for simple daily tasks."""

import json
import logging
import os
from collections import defaultdict
from enum import Enum

import requests
import telebot
from balaboba import Balaboba
from telebot import types


class BotState(Enum):
    Base = 1
    BobaChat = 2
    MakeRemember = 3
    BobaChatWaitInput = 4


class ChatState:
    def __init__(self):
        self._state = BotState.Base
        self._style = 0

    def set_state(self, state: BotState, style: int = 0):
        self._state = state
        self._style = style

    def get_state(self) -> BotState:
        return self._state

    def get_style(self) -> int:
        return self._style


bot_token = os.environ.get("BOT_TOKEN")
bot = telebot.TeleBot(bot_token)
chat_db = defaultdict(ChatState)

bb = Balaboba()
bb_text_types = {0: "–ë–µ–∑ —Å—Ç–∏–ª—è", 25: "–†–µ—Ü–µ–ø—Ç—ã", 11: "–ù–∞—Ä–æ–¥–Ω—ã–µ –º—É–¥—Ä–æ—Å—Ç–∏", 10: "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", 6: "–ö–æ—Ä–æ—Ç–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏"}

menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=12)
menu_markup.add(types.KeyboardButton("–ü–æ–±–æ–ª—Ç–∞—Ç—å :)"))
menu_markup.add(types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ"))
menu_markup.add(types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ TODO"))


# def request_model(context):
#     request_failed = False
#     try:
#         r = requests.post(
#             url=os.environ.get("MODEL_URL"),
#             json={"Context": [context + " [SEP]"]},
#         )
#     except:
#         request_failed = True
#     if request_failed:
#         return None
#     max_tokens = 0
#     response_text = ""
#     for response in json.loads(r.text)["Responses"]:
#         if response["NumTokens"] > max_tokens:
#             max_tokens = response["NumTokens"]
#             response_text = response["Response"]
#     return response_text


@bot.message_handler(commands=["start"])
def start(message):
    """Welcome user of Bot."""
    chat_db[message.chat.id].set_state(BotState.Base)
    bot.send_message(
        message.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –ë–∞–ª–∞–±–æ–±–∏–∫!",
        reply_markup=menu_markup,
    )


def boba_styles_message(message):
    bb_markup = types.InlineKeyboardMarkup(row_width=12)
    for bb_id, name in bb_text_types.items():
        bb_markup.add(types.InlineKeyboardButton(name, callback_data=f"boba_{bb_id}"))
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è", reply_markup=bb_markup)


@bot.message_handler(commands=["chat"])
@bot.message_handler(func=lambda msg: msg.text == "–ü–æ–±–æ–ª—Ç–∞—Ç—å :)" and chat_db[msg.chat.id].get_state() == BotState.Base)
def start_chat(message):
    logging.debug("Start chatting")
    chat_db[message.chat.id].set_state(BotState.BobaChat)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=12)
    markup.add(types.KeyboardButton("Stop –ß–∞—Ç"))
    bot.send_message(message.chat.id, text="–ß—Ç–æ –∂, –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º", reply_markup=markup)

    boba_styles_message(message)


@bot.callback_query_handler(
    func=lambda call: call.data.startswith("boba_") and chat_db[call.message.chat.id].get_state() == BotState.BobaChat
)
def callback_set_style(call):
    message = call.message
    if chat_db[message.chat.id].get_state() != BotState.BobaChat:
        return
    style = int(call.data.replace("boba_", ""))
    style_name = bb_text_types[style]
    bot.send_message(message.chat.id, text=f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å '{style_name}'. –ñ–¥—É —Ç–µ–∫—Å—Ç")
    chat_db[message.chat.id].set_state(BotState.BobaChatWaitInput, style)


@bot.message_handler(
    func=lambda msg: chat_db[msg.chat.id].get_state() in [BotState.BobaChat, BotState.BobaChatWaitInput]
)
def message_with_boba(message):
    if message.text == "Stop –ß–∞—Ç":
        end_chat(message)
    elif chat_db[message.chat.id].get_state() == BotState.BobaChat:
        bot.send_message(message.chat.id, text="–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å")
    else:
        message_with_boba(message)


@bot.message_handler(func=lambda msg: chat_db[msg.chat.id].get_state() == BotState.BobaChatWaitInput)
def message_with_boba(message):
    style = chat_db[message.chat.id].get_style()

    wait_msg = bot.send_message(message.chat.id, text="–î—É–º–∞—é...")
    answer = bb.balaboba(message.text, style)
    bot.delete_message(message.chat.id, wait_msg.message_id)
    bot.send_message(message.chat.id, text=answer)
    chat_db[message.chat.id].set_state(BotState.BobaChat)

    boba_styles_message(message)


def end_chat(message):
    logging.debug("End chatting")
    chat_db[message.chat.id].set_state(BotState.Base)

    bot.send_message(
        message.chat.id,
        f"C–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏—è—Ç–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä!)",
        reply_markup=menu_markup,
    )


@bot.message_handler(commands=["weather"])
@bot.message_handler(
    func=lambda msg: msg.text == "–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ" and chat_db[msg.chat.id].get_state() == BotState.Base
)
def get_moscow_weather(message):
    """Show weather forecast.

    Current weather in Moscow from open-meteo.com site.
    """
    logging.debug("Calling weather API")
    latitude = 55.75
    longitude = 37.6
    url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true&hourly=temperature_2m,relativehumidity_2m,windspeed_10m"
    try:
        r = requests.get(url)
        meta = json.loads(r.text)["current_weather"]
        text = f"–°–µ–π—á–∞—Å –≤ –ú–æ—Å–∫–≤–µ {meta['temperature']} ¬∞C\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {(meta['windspeed'] / 3.6):.2f} –º/—Å"
    except:
        text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
    chat_db[message.chat.id].set_state(BotState.Base)
    bot.send_message(message.chat.id, text=text)


logging.basicConfig(level=logging.DEBUG, format=" %(asctime)s - %(levelname)s - %(message)s")

bot.infinity_polling(restart_on_change=True)
